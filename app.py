import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.pdfbase.cidfonts import UnicodeCIDFont
from reportlab.pdfbase import pdfmetrics

# Register Unicode font (for symbols)
pdfmetrics.registerFont(UnicodeCIDFont("HeiseiKakuGo-W5"))

st.set_page_config(page_title="MPT Diversified Portfolio â€“ Predictive Analytics", layout="wide")

st.title("ðŸ“ˆ Modern Portfolio Theory (MPT) â€“ Two Security Diversification")
st.markdown("""
This tool calculates the **risk and return** of a two-asset portfolio under **Modern Portfolio Theory (MPT)** principles.  
You can enter 5 years of returns for securities **S** and **T**, or use the default data.
""")

# --- Default 5-year return data ---
default_data = pd.DataFrame({
    "S": [0.12, 0.08, 0.10, 0.15, 0.09],
    "T": [0.06, 0.04, 0.07, 0.05, 0.03]
})

with st.form("input_form"):
    st.write("### Enter annual returns for 5 years (%)")
    col1, col2 = st.columns(2)
    s_returns = col1.text_input("Security S returns (comma separated)", "12, 8, 10, 15, 9")
    t_returns = col2.text_input("Security T returns (comma separated)", "6, 4, 7, 5, 3")
    use_default = st.checkbox("Use default data instead", value=False)
    submitted = st.form_submit_button("Submit", use_container_width=True, type="primary")

if submitted:
    if use_default:
        df = default_data.copy()
    else:
        try:
            s_vals = [float(x.strip()) / 100 for x in s_returns.split(",")]
            t_vals = [float(x.strip()) / 100 for x in t_returns.split(",")]
            df = pd.DataFrame({"S": s_vals, "T": t_vals})
        except Exception:
            st.error("Please enter valid numeric returns separated by commas.")
            st.stop()

    st.success("âœ… Data accepted. Performing analysis...")
    st.write("### Input Data (Annual Returns)")
    st.dataframe(df.style.format("{:.2%}"))

    # --- Core statistics ---
    mean_s, mean_t = df["S"].mean(), df["T"].mean()
    sd_s, sd_t = df["S"].std(ddof=0), df["T"].std(ddof=0)
    corr = df["S"].corr(df["T"])

    st.write("### Summary Statistics")
    summary = pd.DataFrame({
        "Mean Return": [mean_s, mean_t],
        "Standard Deviation": [sd_s, sd_t]
    }, index=["S", "T"])
    st.dataframe(summary.style.format("{:.2%}"))
    st.metric("Correlation (r) between S and T", f"{corr:.2f}")

    # --- Portfolio weights ---
    weights = np.arange(0, 1.01, 0.2)
    results = []

    for w in weights:
        w_s, w_t = w, 1 - w
        portfolio_return = w_s * mean_s + w_t * mean_t
        portfolio_var = (
            w_s**2 * sd_s**2 +
            w_t**2 * sd_t**2 +
            2 * w_s * w_t * sd_s * sd_t * corr
        )
        portfolio_sd = np.sqrt(portfolio_var)
        results.append([f"{int(w_s*100)}/{int(w_t*100)}", portfolio_return, portfolio_sd])

    results_df = pd.DataFrame(results, columns=["Weights (S/T)", "Expected Return", "Portfolio Risk (SD)"])
    st.write("### Portfolio Risk and Return Table")
    st.dataframe(results_df.style.format({"Expected Return": "{:.2%}", "Portfolio Risk (SD)": "{:.2%}"}))

    # --- Efficient Frontier plot ---
    fig, ax = plt.subplots(figsize=(8,5))
    ax.plot(results_df["Portfolio Risk (SD)"], results_df["Expected Return"], marker='o')
    ax.set_xlabel("Portfolio Risk (Standard Deviation)")
    ax.set_ylabel("Expected Return")
    ax.set_title("Efficient Frontier (Two-Asset Portfolio)")
    st.pyplot(fig)

    # --- Generate PDF Report ---
    st.write("### Generate PDF Report")
    if st.button("Create LaTeX Report (PDF)"):
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []

        story.append(Paragraph("Modern Portfolio Theory (MPT) â€“ Diversified Risk Report", styles["Title"]))
        story.append(Spacer(1, 0.2*inch))
        story.append(Paragraph(f"Correlation (r) between S and T: {corr:.2f}", styles["Normal"]))
        story.append(Spacer(1, 0.2*inch))
        story.append(Paragraph("Portfolio Risk and Return Table:", styles["Heading3"]))

        table_data = [["Weights (S/T)", "Expected Return", "Portfolio Risk (SD)"]] + \
            [[w, f"{r*100:.2f}%", f"{sd*100:.2f}%"] for w, r, sd in results]

        table = Table(table_data)
        story.append(table)
        story.append(Spacer(1, 0.2*inch))
        story.append(Paragraph("Generated by AI and verified by Alastair McBride for educational purposes.", styles["Italic"]))

        doc.build(story)
        st.download_button("Download PDF Report", buffer.getvalue(), "MPT_Report.pdf", "application/pdf")
